VARIOUS NOTES:

General:
	Blur background, make lower contrast
	Too confusing
	Names too small on screen
	Clean up Code
	Rethink design...
	Name flash when getting resource
	More player heads
	Player Pick player head
	Join Message on Server

APG:
	// show aplayer stance
	// show aplayer action
	// show aplayer item
	// show aplayer equip

	// pause at beginning of game to let people connect

	// color code streamer player, audience players, buildings
	// show direction players is going to shoot
	// make players have a glowing halo
	
	// show round numbers in hud.  color code round numbers.

	// distribute aplayers better

	/*
	 
	Get in rest of audiece player actions.

	Get in high level structure.  Game start, game end.

	Client turn sequencing: ?

	Get in between round stuff.  Need to pause game, show audience player actions.

	Players inhaling
	Players breath full flashing
	Maybe drop down to two breathing styles

	HUD round number
	Busted hud spawn thing

	Showing different damage numbers when players are hit by powerful attacks - different colors, different sizes, different lifetime, on react.  Really amp this up.

	parenting needs to work more reliably.

	.........................

	Look more carefully into whispers
	Look into twitch special account info stuff

	How to do multiple example projects?

	Some way to make Unity game and HTML5 clients interact without needing to connect to twitch?
	Easier way to test input, on both the server and the client?
	Keeping network messages in sync better?

	Whispers?

	Would be fun to have lots of quirky special one-off actions for audience players.

	What else do audience players need to see:
	Stats
	Other player stats
	Hints and Game Rules
	Surprising / funny things
	Teams queued up

	Other player category roles (in a fractal way)?

	Would be cool to have different player classes that have different impacts (to be selected when forming a team)

	Screen for turn effects

 */
BASIC GAME LOGIC
/*

	So what can I pull out here?

	Inviting
	______
	Inviter: Everyone gets invited to play.
	Invite-up-to-max-players.


	Player Choice Framework
	_____________________


	Player Joining / Leaving / Being Kicked Framework
	_________________________________________


	Lobby for Team Joining
	___________________


	Teams
	______


	Persistent Accounts
	________________


 */
PlayerSet
		/*
			So, how should the player system work here?

			Obviously, many game types might not have persistent, limited players at all.
			Others might have a number of different types of player roles, of probably limited number.

			But it should also be convenient.
		 */

			/*
			 * Think this through: 
			 * so for my game, I wanted to have a bridge between existing entities in the game world and then players joining in real time and taking them over.
			 * also, a layer between the apg basic game logic and then the actual audience players... right?
			 * This seems to muddle two concepts.
			 * 
			 * In Rachel's game, we just want players to join and not be duplicated.
			 */
WEBPAGE.ts:
// way more error messsages
// debug sending of messages interally
// launching app without using chat somehow?
// make it easier to configure client - in what ways?  Screen size.  Landscape vs portrait.
// simpler examples
// vs code
// reorganize this file better.

// This is the only script referenced by the web page.
MainPlayerInput.ts

